name: Compile and Lint Check

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup ROS2 Humble
        run: |
          # Set locale
          sudo apt update && sudo apt install -y locales
          sudo locale-gen en_US en_US.UTF-8
          sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
          export LANG=en_US.UTF-8

          # Add the ROS2 apt repository
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt update && sudo apt install -y curl gnupg
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

          # Install ROS2 Humble
          sudo apt update && sudo apt install -y ros-humble-desktop

          # Install development tools and ROS tools
          sudo apt install -y python3-flake8-docstrings python3-pip python3-pytest-cov ros-dev-tools
          sudo apt install -y python3-flake8-blind-except \
          python3-flake8-builtins \
          python3-flake8-class-newline \
          python3-flake8-comprehensions \
          python3-flake8-deprecated \
          python3-flake8-import-order \
          python3-flake8-quotes \
          python3-pytest-repeat \
          python3-pytest-rerunfailures

      - name: Install PCL and dependencies manually
        run: |
          sudo apt update
          # Install PCL manually
          sudo apt install -y libpcl-dev
          
          sudo rosdep init || true  # Skips init if already initialized
          rosdep update
          
          # Set ROS_DISTRO environment variable
          export ROS_DISTRO=humble
          
          # Run rosdep without attempting to resolve PCL
          rosdep install --from-paths src --ignore-src -y --skip-keys "fastcdr rti-connext-dds-6.0.1 urdfdom_headers PCL"
          
          sudo apt-get update && sudo apt-get install -y nlohmann-json3-dev

      - name: Compile the code
        run: |
          # Source ROS2 environment and build all packages in src
          source /opt/ros/humble/setup.bash
          colcon build --packages-up-to --event-handlers console_cohesion+

      - name: Run tests
        run: |
          # Source ROS2 environment and run all tests in src
          source /opt/ros/humble/setup.bash
          colcon test --event-handlers console_cohesion+

      - name: Install ROS2 linters and tools
        run: |
          # Install ament linters and any required linter plugins for ROS2
          sudo apt update && sudo apt install -y \
            ros-humble-ament-lint \
            ros-humble-ament-cmake \
            ros-humble-ament-cmake-lint-cmake \
            ros-humble-ament-cmake-clang-format \
            ros-humble-ament-cmake-cpplint \
            ros-humble-ament-cmake-flake8 \
            ros-humble-ament-cmake-pep257 \
            python3-ament-lint

      - name: Linter Check (cpp and python)
        run: |
          # Ensure the ROS2 environment is sourced and run ament_lint_auto on all packages
          source /opt/ros/humble/setup.bash
          ament_lint_auto --all || echo "ament_lint_auto command not found, skipping linter check."

      - name: C++ Style Check
        run: |
          # Apply clang-format for C++ code and run cpplint
          sudo apt install -y clang-format
          clang-format -i --style=Google $(find ./src -name '*.cpp' -or -name '*.hpp')
          source /opt/ros/humble/setup.bash
          ament_cpplint . --filters=-whitespace,-legal/copyright,-build/,-readability

      - name: Python Style Check (PEP8)
        run: |
          # Install flake8 and run PEP8 linter for Python
          sudo apt install -y flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # Replace any tabs with 4 spaces in all Python files in the src directory
          find ./src ./docs/_source -name "*.py" -exec sed -i 's/\t/    /g' {} +
          
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82,E101,E112 --show-source --statistics
          
          # Exit-zero treats all errors as warnings.
          flake8 . --count --exit-zero --max-complexity=10 --statistics
        